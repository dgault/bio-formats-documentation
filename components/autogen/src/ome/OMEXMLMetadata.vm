//
// $q.id()
//

/*
OME Bio-Formats package for reading and converting biological file formats.
Copyright (C) 2005-@year@ UW-Madison LOCI and Glencoe Software, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 * Created by $user via MetadataAutogen on $timestamp
 *
 *-----------------------------------------------------------------------------
 */

package loci.formats.ome;

import ome.xml.OMEXMLNode;
import ${q.basePackage()}.ome.*;
#if ($q.spwImport())
import ${q.basePackage()}.spw.*;
#end##if spwImport
import java.util.List;
import loci.common.LogTools;

/**
 * A metadata store implementation for constructing and manipulating OME-XML
 * DOMs for the $q.version() version of OME-XML. It requires the
 * $q.basePackage() package to compile (part of ome-xml.jar).
 *
 * <dl><dt><b>Source code:</b></dt>
 * <dd><a href="https://skyking.microscopy.wisc.edu/trac/java/browser/trunk/components/bio-formats/src/loci/formats/ome/$q.id()">Trac</a>,
 * <a href="https://skyking.microscopy.wisc.edu/svn/java/trunk/components/bio-formats/src/loci/formats/ome/$q.id()">SVN</a></dd></dl>
 *
 * @author Curtis Rueden ctrueden at wisc.edu
 * @author Melissa Linkert linkert at wisc.edu
 */
public class $q.className() extends OMEXMLMetadata {

  // -- MetadataRetrieve API methods --

  // - Entity counting -
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))
#if ($q.countable())
#set ($last = $q.last())

  /* @see loci.formats.meta.MetadataRetrieve#get${entity}Count($q.typesList($q.chop($q.defaultPath()))) */
  public int get${entity}Count($q.argsList($q.chop($q.defaultPath()))) {
#if ($q.path() == "-")
    // NB: $entity unsupported for schema version $q.version()
    return -1;
#else
    for (int i=0; i<Integer.MAX_VALUE; i++) {
      if (get${last}Node($q.varsList().replaceFirst("[a-zA-Z_0-9]+$", "i"), false) == null) return i;
    }
    return -1;
#end##if "-"
  }
#end##if countable
#end##foreach $entity

  // - Entity retrieval -
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))

  // - $entity property retrieval -
#foreach ($prop in $q.props())
#set ($dummy = $q.setProperty($prop))
#set ($last = $q.last())
#set ($lastVar = $q.var($last))

  /* @see loci.formats.meta.MetadataRetrieve#get$entity$prop($q.typesList()) */
  public $q.defaultType() get$entity$prop($q.argsList()) {
#if ($q.path() == "-")
    // NB: $prop unsupported for schema version $q.version()
    return null;
#else
    ${last}Node $lastVar = get${last}Node($q.varsList(), false);
#if ($prop.endsWith("Ref"))
#set ($refName = $prop.replaceAll('Ref', ''))
    ${refName}Node node = ${lastVar}.get${refName}();
    if (node == null) return null;
    return node.getNodeID();
#else
    return $lastVar == null ? null : $q.getter($lastVar);
#end##if $prop.endsWith("Ref")
#end##if "-"
  }
#end##foreach $prop
#end##foreach $entity

  // -- MetadataStore API methods --

  /* @see loci.formats.meta.MetadataStore#setRoot(Object) */
  public void createRoot() {
    try {
      setRoot(ome.xml.OMEXMLFactory.newOMENode("$q.version()"));
    }
    catch (java.io.IOException exc) { LogTools.trace(exc); }
    catch (org.xml.sax.SAXException exc) { LogTools.trace(exc); }
    catch (javax.xml.parsers.ParserConfigurationException exc) {
      LogTools.trace(exc);
    }
  }

  /* @see loci.formats.meta.MetadataStore#setRoot(Object) */
  public void setRoot(Object root) {
    super.setRoot(root);
    if (!(root instanceof OMENode)) {
      throw new IllegalArgumentException(
        "Invalid root type: " + root.getClass().getName() + ". " +
        "This metadata store accepts root objects of type " +
        OMENode.class.getName());
    }
    this.root = (OMENode) root;
    clearCachedNodes();
  }
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))

  // - $entity property storage -
#foreach ($prop in $q.props())
#set ($dummy = $q.setProperty($prop))
#set ($varName = $q.var($prop))
#set ($last = $q.last())
#set ($lastVar = $q.var($last))

  /* @see loci.formats.meta.MetadataStore#set$entity$prop($q.defaultType(), $q.typesList()) */
  public void set$entity$prop($q.defaultType() $varName, $q.argsList()) {
#if ($q.path() == "-")
    // NB: $prop unsupported for schema version $q.version()
#else
    if ($varName == null) return;
    ${last}Node ${lastVar}Node = get${last}Node($q.varsList(), true);
#if ($prop.endsWith("Ref"))
#set ($refName = $prop.replaceAll('Ref', ''))
    OMENode ome = (OMENode) root;
    List list = ome.get${refName}List();
    ${refName}Node node = null;
    for (int i=0; i<list.size(); i++) {
      OMEXMLNode o = (OMEXMLNode) list.get(i);
      if (o.getNodeID().equals($varName)) node = (${refName}Node) o;
    }
    if (node == null) {
      node = new ${refName}Node(ome);
      node.setNodeID($varName);
    }
    ${prop}Node ref = new ${prop}Node(${lastVar}Node);
    ref.set${refName}Node(node);
#else
    $q.setter("${lastVar}Node", $varName);
#end##if $prop.endsWith("Ref")
#end##if "-"
  }
#end##foreach $prop
#end##foreach $entity

  // -- Helper methods --
#foreach ($path in $q.unique())
#set ($last = $q.last($path))
#set ($lastVar = $q.var($last))
#set ($pathVar = $q.var($path))
#set ($indices = $q.indices($path))

  // $path
  private ${last}Node ${pathVar}Node = null;
#foreach ($index in $indices)
  private int ${pathVar}Node${index}Index = -1;
#end##foreach $index
  private ${last}Node get${last}Node($q.argsList($path), boolean create) {
    // check whether indices match last request (i.e., node is cached)
    boolean match = true;
#foreach ($index in $indices)
#set ($indexVar = $q.var($index))
    if (${pathVar}Node${index}Index != ${indexVar}Index) match = false;
#end##foreach $index
    if (match) return ${pathVar}Node;
    ${pathVar}Node = null;
#foreach ($index in $indices)
#set ($indexVar = $q.var($index))
    ${pathVar}Node${index}Index = ${indexVar}Index;
#end##foreach $index

#set ($slash = $path.lastIndexOf("/"))
#if ($slash < 0)
#set ($pre = "")
#set ($node = "OME")
#else
#set ($pre = $path.substring(0, $slash))
#set ($node = $q.last($pre))
#end##if $slash < 0
#set ($node = $node.replaceAll("\\+", ""))
#set ($nodeVar = $q.var($node))
#set ($multi = $path.endsWith("+"))
#set ($vars = $q.varsList($pre))
#if ($vars == "")
    ${node}Node $nodeVar = (${node}Node) root;
#else
    // get $pre node
    ${node}Node $nodeVar = get${node}Node($vars, create);
    if ($nodeVar == null) return null;
#end##if $vars == ""
#if ($multi)
    // get $last+ node
    int count = ${nodeVar}.get${last}Count();
    if (!create && count <= ${lastVar}Index) return null;
    for (int i=count; i<=${lastVar}Index; i++) new ${last}Node($nodeVar);
    List list = ${nodeVar}.get${last}List();
    ${pathVar}Node = (${last}Node) list.get(${lastVar}Index);
#else
    // get $last node
    ${last}Node $lastVar = ${nodeVar}.get$last();
    if ($lastVar == null) {
      if (create) $lastVar = new ${last}Node($nodeVar);
      else return null;
    }
    ${pathVar}Node = $lastVar;
#end##if $multi
    return ${pathVar}Node;
  }
#end##foreach $path

  private void clearCachedNodes() {
    OMEXMLNode.clearCaches();
#foreach ($path in $q.unique())
#set ($pathVar = $q.var($path))
#set ($indices = $q.indices($path))
    // $path
    ${pathVar}Node = null;
#foreach ($index in $indices)
    ${pathVar}Node${index}Index = -1;
#end##foreach $index
#end##foreach $path
  }

}
