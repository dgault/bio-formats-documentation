//
// FilterMetadata.vm
//

/*
OME Bio-Formats package for reading and converting biological file formats.
Copyright (C) 2005-@year@ UW-Madison LOCI and Glencoe Software, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 * Created by $user via MetadataAutogen on $timestamp
 *
 *-----------------------------------------------------------------------------
 */

package loci.formats.meta;

import loci.common.DataTools;

import ome.xml.model.enums.*;
import ome.xml.model.primitives.*;

/**
 * An implementation of {@link MetadataStore} that removes unprintable
 * characters from metadata values before storing them in a delegate
 * MetadataStore.
 *
 * <dl><dt><b>Source code:</b></dt>
 * <dd><a href="https://skyking.microscopy.wisc.edu/trac/java/browser/trunk/components/bio-formats/src/loci/formats/meta/FilterMetadata.java">Trac</a>,
 * <a href="https://skyking.microscopy.wisc.edu/svn/java/trunk/components/bio-formats/src/loci/formats/meta/FilterMetadata.java">SVN</a></dd></dl>
 *
 * @author Melissa Linkert melissa at glencoesoftware.com
 * @author Curtis Rueden ctrueden at wisc.edu
 */
public class FilterMetadata implements MetadataStore {

  // -- Fields --

  private MetadataStore store;
  private boolean filter;

  // -- Constructor --

  public FilterMetadata(MetadataStore store, boolean filter) {
    this.store = store;
    this.filter = filter;
  }

  // -- MetadataStore API methods --

  /* @see MetadataStore#createRoot() */
  public void createRoot() {
    store.createRoot();
  }

  /* @see MetadataStore#getRoot() */
  public Object getRoot() {
    return store.getRoot();
  }

  /* @see MetadataStore#setRoot(Object) */
  public void setRoot(Object root) {
    store.setRoot(root);
  }

  /* @see MetadataStore#setUUID(String) */
  public void setUUID(String uuid) {
    store.setUUID(uuid);
  }
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))

  // -- $entity property storage -
#foreach ($prop in $q.props())
#set ($dummy = $q.setProperty($prop))

  /* @see MetadataStore#set$entity$prop($q.type(), $q.typesList()) */
  public void set$entity$prop($q.type() $q.var($prop), $q.argsList()) {
#if ($q.type() == "String")
    String filteredValue = filter ? DataTools.sanitize($q.var($prop)) : $q.var($prop);
    store.set$entity$prop(filteredValue, $q.varsList());
#else
    store.set$entity$prop($q.var($prop), $q.varsList());
#end
  }
#end##foreach $prop
#end##foreach $entity

}
