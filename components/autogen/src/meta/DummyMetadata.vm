//
// DummyMetadata.java
//

/*
OME Bio-Formats package for reading and converting biological file formats.
Copyright (C) 2005-@year@ UW-Madison LOCI and Glencoe Software, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 * Created by $user via MetadataAutogen on $timestamp
 *
 *-----------------------------------------------------------------------------
 */

package loci.formats.meta;

import ome.xml.r201004.enums.*;
import ome.xml.r201004.primitives.*;

/**
 * A dummy implementation for {@link MetadataStore} and
 * {@link MetadataRetrieve} that is used when no other
 * metadata implementations are available.
 *
 * <dl><dt><b>Source code:</b></dt>
 * <dd><a href="https://skyking.microscopy.wisc.edu/trac/java/browser/trunk/components/bio-formats/src/loci/formats/meta/DummyMetadata.java">Trac</a>,
 * <a href="https://skyking.microscopy.wisc.edu/svn/java/trunk/components/bio-formats/src/loci/formats/meta/DummyMetadata.java">SVN</a></dd></dl>
 *
 * @author Chris Allan callan at blackcat.ca
 * @author Curtis Rueden ctrueden at wisc.edu
 */
public class DummyMetadata implements IMetadata {

  // -- MetadataRetrieve API methods --

  // - Entity counting -
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))
#if ($q.countable())

  /* @see MetadataRetrieve#get${entity}Count($q.typesList($q.chop())) */
  public int get${entity}Count($q.argsList($q.chop())) {
    return -1;
  }
#end##if countable
#end##foreach $entity

  // - Entity retrieval -

  /* @see MetadataRetrieve#getUUID() */
  public String getUUID() {
    return null;
  }
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))

  // - $entity property retrieval -

#foreach ($prop in $q.props())
#set ($dummy = $q.setProperty($prop))
  /* @see MetadataRetrieve#get$entity$prop($q.typesList()) */
  public $q.type() get$entity$prop($q.argsList()) {
    return null;
  }
#end##foreach $prop
#end##foreaach $entity

  // -- MetadataStore API methods --

  /* @see MetadataStore#createRoot() */
  public void createRoot() {
  }

  /* @see MetadataStore#getRoot() */
  public Object getRoot() {
    return null;
  }

  /* @see MetadataStore#setRoot(Object) */
  public void setRoot(Object root) {
  }

  /* @see MetadataStore#setUUID() */
  public void setUUID(String uuid) {
  }
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))

  // - $entity property storage -
#foreach ($prop in $q.props())
#set ($dummy = $q.setProperty($prop))

  /* @see MetadataStore#set$entity$prop($q.type(), $q.typesList()) */
  public void set$entity$prop($q.type() $q.var($prop), $q.argsList()) {
  }
#end##foreach $prop
#end##foreach $entity

}
