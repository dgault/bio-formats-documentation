//
// bio-formats.ice
//

/*
OME Bio-Formats package for reading and converting biological file formats.
Copyright (C) 2005-@year@ UW-Madison LOCI and Glencoe Software, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 * Created by $user via MetadataAutogen on $timestamp
 *
 *-----------------------------------------------------------------------------
 */

[["java:package:loci.ice"]]

module formats {

  sequence<byte> ByteSeq;
  sequence<ByteSeq> ByteByteSeq;
  sequence<short> ShortSeq;
  sequence<ShortSeq> ShortShortSeq;
  sequence<int> IntSeq;
  sequence<string> StringSeq;

  interface IMetadata;

  interface IFormatReader {
    void setId(string id);

    //const int MUST_GROUP = 0;
    //const int CAN_GROUP = 1;
    //const int CANNOT_GROUP = 2;

    bool isThisType(string name, bool open);
    //bool isThisType2(ByteSeq block);
    int getImageCount();
    bool isRGB();
    int getSizeX();
    int getSizeY();
    int getSizeZ();
    int getSizeC();
    int getSizeT();
    int getPixelType();
    int getEffectiveSizeC();
    int getRGBChannelCount();
    bool isIndexed();
    bool isFalseColor();
    ByteByteSeq get8BitLookupTable();
    ShortShortSeq get16BitLookupTable();
    IntSeq getChannelDimLengths();
    StringSeq getChannelDimTypes();
    int getThumbSizeX();
    int getThumbSizeY();
    bool isLittleEndian();
    string getDimensionOrder();
    bool isOrderCertain();
    bool isInterleaved();
    bool isInterleavedSubC(int subC);
    //ByteSeq openBytes1(int no);
    ByteSeq openBytes(int no, int x, int y, int width, int height);
    //ByteSeq openBytes3(int no, ByteSeq buf);
    //ByteSeq openBytes4(int no, ByteSeq buf,
    //  int x, int y, int width, int height);
    ByteSeq openThumbBytes(int no);
    void closeFile(bool fileOnly);
    string getFormat();
    StringSeq getSuffixes();
    void close();
    int getSeriesCount();
    void setSeries(int no);
    int getSeries();
    void setNormalized(bool normalize);
    bool isNormalized();
    void setMetadataCollected(bool collect);
    bool isMetadataCollected();
    void setOriginalMetadataPopulated(bool populate);
    bool isOriginalMetadataPopulated();
    void setGroupFiles(bool group);
    bool isGroupFiles();
    bool isMetadataComplete();
    int fileGroupOption(string id);
    StringSeq getUsedFiles();
    string getCurrentFile();
    int getIndex(int z, int c, int t);
    IntSeq getZCTCoords(int index);
    //Object getMetadataValue(string field);
    //Hashtable getMetadata();
    //CoreMetadata getCoreMetadata();
    void setMetadataFiltered(bool filter);
    bool isMetadataFiltered();
    void setMetadataStore(IMetadata* store);
    //IMetadata* getMetadataStore();
    //Object getMetadataStoreRoot();
    //IFormatReader[] getUnderlyingReaders();
  };

  interface IFormatWriter {
    void setId(string id);
    void close();
    void saveBytes1(ByteSeq bytes, bool last);
    void saveBytes2(ByteSeq bytes, int series, bool lastInSeries, bool last);
    bool canDoStacks();
    void setMetadataRetrieve(IMetadata* r);
    IMetadata getMetadataRetrieve();
    void setFramesPerSecond(int rate);
    int getFramesPerSecond();
    StringSeq getCompressionTypes();
    IntSeq getPixelTypes();
    bool isSupportedType(int type);
    void setCompression(string compress);
    bool isThisType(string name);
    string getFormat();
    StringSeq getSuffixes();
  };

  interface IMetadata {
    // -- MetadataRetrieve methods --

    string getOMEXML();

    // - Entity counting -

#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))
#if ($q.countable())
    int get${entity}Count($q.argsList($q.chop()));
#end###if countable
#end##foreach $entity

    // - Entity retrieval -

    string getUUID();
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))

    // - $entity property retrieval -

#foreach ($prop in $q.props())
#set ($dummy = $q.setProperty($prop))
    $q.ice($q.type()) get$entity$prop($q.argsList());
#end##foreach $prop
#end##foreach $entity

    // -- MetadataStore methods --

    void createRoot();
    //void setRoot(Object root);
    //Object getRoot();

    // - Entity storage -

    void setUUID(string uuid);
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))

    // - $entity property storage -
#foreach ($prop in $q.props())
#set ($dummy = $q.setProperty($prop))
    void set$entity$prop($q.ice($q.type()) $q.var($prop), $q.argsList());
#end##foreach $prop
#end##foreach $entity
  };
};
