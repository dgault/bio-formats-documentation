//
// IMetadataI.java
//

/*
OME Bio-Formats package for reading and converting biological file formats.
Copyright (C) 2005-@year@ UW-Madison LOCI and Glencoe Software, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 * Created by $user via MetadataAutogen on $timestamp
 *
 *-----------------------------------------------------------------------------
 */

package loci.ice.formats;

import Ice.Current;
import loci.common.services.DependencyException;
import loci.common.services.ServiceException;
import loci.common.services.ServiceFactory;
import loci.formats.MetadataTools;
import loci.formats.meta.IMetadata;
import loci.formats.services.OMEXMLService;

/**
 * Server-side Ice wrapper for client/server
 * {@link loci.formats.meta.IMetadata} objects.
 *
 * <dl><dt><b>Source code:</b></dt>
 * <dd><a href="https://skyking.microscopy.wisc.edu/trac/java/browser/trunk/components/bio-formats-ice/src/loci/ice/formats/IMetadataI.java">Trac</a>,
 * <a href="https://skyking.microscopy.wisc.edu/svn/java/trunk/components/bio-formats-ice/src/loci/ice/formats/IMetadataI.java">SVN</a></dd></dl>
 *
 * @author Hidayath Ansari mansari at wisc.edu
 * @author Curtis Rueden ctrueden at wisc.edu
 */
public class IMetadataI extends _IMetadataDisp {

  // -- Fields --

  private IMetadata metadataObject;
  private OMEXMLService service;

  // -- Constructor --

  public IMetadataI() {
    try {
      ServiceFactory factory = new ServiceFactory();
      service = factory.getInstance(OMEXMLService.class);
      metadataObject = service.createOMEXMLMetadata();
    }
    catch (DependencyException de) { }
    catch (ServiceException se) { }
  }

  // -- IMetadataI methods --

  public loci.formats.meta.IMetadata getWrappedObject() {
    return metadataObject;
  }

  public void setMetadataObject(loci.formats.meta.IMetadata meta) {
    metadataObject = meta;
  }

  // -- MetadataRetrieve methods --

  public String getOMEXML(Current current) {
    try {
      return service.getOMEXML(metadataObject);
    }
    catch (ServiceException se) { }
    return null;
  }

  // - Entity counting -
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))
#if ($q.countable())
#set ($args = $q.argsList($q.chop()))
#if ($args == "")
#set ($args = "Current current")
#else
#set ($args = $args + ", Current current")
#end##if $args == ""

  public int get${entity}Count($args) {
    return metadataObject.get${entity}Count($q.varsList($q.chop()));
  }
#end###if countable
#end##foreach $entity

  // - Entity retrieval -

  public String getUUID(Current current) {
    return metadataObject.getUUID();
  }
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))

  // - $entity property retrieval -
#foreach ($prop in $q.props())
#set ($dummy = $q.setProperty($prop))

  public $q.primitive($q.type()) get$entity$prop($q.argsList(), Current current) {
    return metadataObject.get$entity$prop($q.varsList());
  }
#end##foreach $prop
#end##foreach $entity

  // -- MetadataStore methods --

  public void createRoot(Current current) {
    metadataObject.createRoot();
  }

  // - Entity storage -

  public void setUUID(String uuid, Current current) {
    metadataObject.setUUID(uuid);
  }
#foreach ($entity in $q.entities())
#set ($dummy = $q.setEntity($entity))

  // - $entity property storage -
#foreach ($prop in $q.props())
#set ($dummy = $q.setProperty($prop))

  public void set$entity$prop($q.primitive($q.type()) $q.var($prop), $q.argsList(), Current current) {
    metadataObject.set$entity$prop($q.var($prop), $q.varsList());
  }
#end##foreach $prop
#end##foreach $entity

}
